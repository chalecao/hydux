// @flow
import {
  type ActionReturn,
  type ActionState,
  type ActionCmdReturn,
  type ActionType,
  type ActionsType,
  type UnknownArgsActionType,
  type NormalAction,
} from './types'
import Cmd, { type CmdType, type Sub } from './cmd';
import { isFn, noop, isPojo } from './utils';
export * from './helpers';
export * from './types';
export type { CmdType, Sub, ActionReturn };
export { Cmd, noop, isFn, isPojo };
export type InitObj<S, A> = {
  state: S,
  cmd?: A
}
export type Init<S, A> = () => S | [S, CmdType<A>] | InitObj<S, A>
export type View = (...args: any[]) => any;
export type Subscribe<S, A> = (state: S) => CmdType<A>;
export type OnUpdate<S, A> = <M>(data: {
    prevAppState: S;
    nextAppState: S;
    msgData: M;
    action: string;
}) => void;
export type OnUpdateStart<S, A> = <M>(data: {
    action: string;
}) => void;
export interface AppProps<State, Actions> {
    init: Init<State, Actions>;
    view: View;
    actions: Actions;
    subscribe?: Subscribe<State, Actions>;
    onRender?: (view: any) => void;
    onUpdate?: OnUpdate<State, Actions>;
    onUpdateStart?: OnUpdateStart<State, Actions>;
}
/**
 * run action and return a normalized result ([State, CmdType<>]),
 * this is useful to write High-Order-Action, which take an action and return a wrapped action.
 * @param result result of `action(msg: Data)`
 * @param state
 * @param actions
 */
declare export function runAction<S, A, PS, PA>(result: ActionReturn<S, A> | ((state: S, actions: A) => ActionReturn<S, A>)): ActionCmdReturn<S, A>;
declare export function withParents<S, A, PS, PA, A1>(action: (a1: A1) => (s: S, a: A) => any, wrapper?: (action: (a1: A1) => ActionCmdReturn<S, A>, parentState: PS, parentActions: PA, state: S, actions: A) => ActionReturn<S, A>, parentState?: PS, parentActions?: PA): any;
declare export function withParents<S, A, PS, PA, A1, A2>(action: (a1: A1, a2: A2) => (s: S, a: A) => any, wrapper?: (action: (a1: A1, a2: A2) => ActionCmdReturn<S, A>, parentState: PS, parentActions: PA, state: S, actions: A) => ActionReturn<S, A>, parentState?: PS, parentActions?: PA): any;
declare export function withParents<S, A, PS, PA, A1, A2, A3>(action: (a1: A1, a2: A2, a3: A3) => (s: S, a: A) => any, wrapper?: (action: (a1: A1, a2: A2, a3: A3) => ActionCmdReturn<S, A>, parentState: PS, parentActions: PA, state: S, actions: A) => ActionReturn<S, A>, parentState?: PS, parentActions?: PA): any;
declare export function withParents<S, A, PS, PA, A1, A2, A3, A4>(action: (a1: A1, a2: A2, a3: A3, a4: A4) => (s: S, a: A) => any, wrapper?: (action: (a1: A1, a2: A2, a3: A3, a4: A4) => ActionCmdReturn<S, A>, parentState: PS, parentActions: PA, state: S, actions: A) => ActionReturn<S, A>, parentState?: PS, parentActions?: PA): any;
declare export function withParents<S, A, PS, PA, A1, A2, A3, A4, A5>(action: (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5) => (s: S, a: A) => any, wrapper?: (action: (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5) => ActionCmdReturn<S, A>, parentState: PS, parentActions: PA, state: S, actions: A) => ActionReturn<S, A>, parentState?: PS, parentActions?: PA): any;


export interface Component<State, Actions> {
  init: Init<State, Actions>;
  view: View;
  actions: Actions;
}

export interface Context<State, Actions, RenderReturn> {
    actions: Actions;
    state: State;
    init: Init<State, Actions>;
    view: View;
    subscribe?: Subscribe<State, Actions>;
    onRender?: ((view: any) => RenderReturn);
    onUpdate?: OnUpdate<State, Actions>;
    onUpdateStart?: OnUpdateStart<State, Actions>;
    render(state?: State): RenderReturn;
    /** Patch a component in runtime, used for code-splitting */
    patch<S, A>(path: string | string[], component: Component<S, A>): RenderReturn;
}
export type App<State, Actions> = (props: AppProps<State, Actions>) => Context<State, Actions, any>;
declare export function app<State, Actions>(props: AppProps<State, Actions>): Context<State, Actions, any>;
export default app;
